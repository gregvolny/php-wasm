diff --git a/third_party/php8.3-src/ext/openssl/openssl.c b/third_party/php8.3-src/ext/openssl/openssl.c
index 6f85e98..75d4090 100644
--- a/third_party/php8.3-src/ext/openssl/openssl.c
+++ b/third_party/php8.3-src/ext/openssl/openssl.c
@@ -99,7 +99,7 @@
 #define HAVE_EVP_PKEY_EC 1
 
 /* the OPENSSL_EC_EXPLICIT_CURVE value was added
- * in OpenSSL 1.1.0; previous versions should 
+ * in OpenSSL 1.1.0; previous versions should
  * use 0 instead.
  */
 #ifndef OPENSSL_EC_EXPLICIT_CURVE
@@ -1314,10 +1314,10 @@ PHP_MINIT_FUNCTION(openssl)
 #endif
 
 	/* override the default tcp socket provider */
-	php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
+	// php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
 
-	php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
 
 	REGISTER_INI_ENTRIES();
 
@@ -1380,8 +1380,8 @@ PHP_MSHUTDOWN_FUNCTION(openssl)
 	CONF_modules_free();
 #endif
 
-	php_unregister_url_stream_wrapper("https");
-	php_unregister_url_stream_wrapper("ftps");
+	// php_unregister_url_stream_wrapper("https");
+	// php_unregister_url_stream_wrapper("ftps");
 
 	php_stream_xport_unregister("ssl");
 #ifndef OPENSSL_NO_SSL3
@@ -4573,7 +4573,7 @@ static EVP_PKEY *php_openssl_pkey_init_ec(zval *data, bool *is_private) {
 		EVP_PKEY_CTX_free(ctx);
 		ctx = EVP_PKEY_CTX_new(param_key, NULL);
 	}
-	
+
 	if (EVP_PKEY_check(ctx) || EVP_PKEY_public_check_quick(ctx)) {
 		*is_private = d != NULL;
 		EVP_PKEY_up_ref(param_key);
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
index 6da7708..0d53a33 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
index c933c34..fbd0ba7 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
index c6b907f..c0804c8 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 
diff --git a/third_party/php8.3-src/ext/standard/basic_functions.c b/third_party/php8.3-src/ext/standard/basic_functions.c
index 97001bc..dd1139c 100644
--- a/third_party/php8.3-src/ext/standard/basic_functions.c
+++ b/third_party/php8.3-src/ext/standard/basic_functions.c
@@ -351,8 +351,8 @@ PHP_MINIT_FUNCTION(basic) /* {{{ */
 	php_register_url_stream_wrapper("glob", &php_glob_stream_wrapper);
 #endif
 	php_register_url_stream_wrapper("data", &php_stream_rfc2397_wrapper);
-	php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
 
 	return SUCCESS;
 }
diff --git a/third_party/php8.3-src/ext/standard/credits.c b/third_party/php8.3-src/ext/standard/credits.c
index 4e8722d..1343330 100644
--- a/third_party/php8.3-src/ext/standard/credits.c
+++ b/third_party/php8.3-src/ext/standard/credits.c
@@ -33,6 +33,11 @@ PHPAPI ZEND_COLD void php_print_credits(int flag) /* {{{ */
 		PUTS("PHP Credits\n");
 	}
 
+	php_info_print_table_start();
+	php_info_print_table_header(1, "php-wasm");
+	php_info_print_table_row(1, "Sean Morris & Oraoto");
+	php_info_print_table_end();
+
 	if (flag & PHP_CREDITS_GROUP) {
 		/* Group */
 
diff --git a/third_party/php8.3-src/ext/standard/credits_ext.h b/third_party/php8.3-src/ext/standard/credits_ext.h
index 093e56f..2b83e52 100644
--- a/third_party/php8.3-src/ext/standard/credits_ext.h
+++ b/third_party/php8.3-src/ext/standard/credits_ext.h
@@ -47,10 +47,12 @@ CREDIT_LINE("Opcache", "Andi Gutmans, Zeev Suraski, Stanislav Malyshev, Dmitry S
 CREDIT_LINE("OpenSSL", "Stig Venaas, Wez Furlong, Sascha Kettler, Scott MacVicar, Eliot Lear");
 CREDIT_LINE("Oracle (OCI) driver for PDO", "Wez Furlong");
 CREDIT_LINE("pcntl", "Jason Greene, Arnaud Le Blanc");
+CREDIT_LINE("pdo-pglite", "Sean Morris");
 CREDIT_LINE("Perl Compatible Regexps", "Andrei Zmievski");
 CREDIT_LINE("PHP Archive", "Gregory Beaver, Marcus Boerger");
 CREDIT_LINE("PHP Data Objects", "Wez Furlong, Marcus Boerger, Sterling Hughes, George Schlossnagle, Ilia Alshanetsky");
 CREDIT_LINE("PHP hash", "Sara Golemon, Rasmus Lerdorf, Stefan Esser, Michael Wallner, Scott MacVicar");
+CREDIT_LINE("pib", "Oraoto, Sean Morris");
 CREDIT_LINE("Posix", "Kristian Koehntopp");
 CREDIT_LINE("PostgreSQL driver for PDO", "Edin Kadribasic, Ilia Alshanetsky");
 CREDIT_LINE("PostgreSQL", "Jouni Ahto, Zeev Suraski, Yasuo Ohgaki, Chris Kings-Lynne");
@@ -73,6 +75,7 @@ CREDIT_LINE("System V Semaphores", "Tom May");
 CREDIT_LINE("System V Shared Memory", "Christian Cartus");
 CREDIT_LINE("tidy", "John Coggeshall, Ilia Alshanetsky");
 CREDIT_LINE("tokenizer", "Andrei Zmievski, Johannes Schlueter");
+CREDIT_LINE("Vrzno", "Sean Morris");
 CREDIT_LINE("XML", "Stig Bakken, Thies C. Arntzen, Sterling Hughes");
 CREDIT_LINE("XMLReader", "Rob Richards");
 CREDIT_LINE("XMLWriter", "Rob Richards, Pierre-Alain Joye");
diff --git a/third_party/php8.3-src/ext/tokenizer/tokenizer.c b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
index 75cc99d..872164e 100644
--- a/third_party/php8.3-src/ext/tokenizer/tokenizer.c
+++ b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
@@ -319,7 +319,7 @@ static void add_token(
 	zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &token);
 }
 
-static bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
+bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
 {
 	zval source_zval;
 	zend_lex_state original_lex_state;
diff --git a/third_party/php8.3-src/main/fastcgi.c b/third_party/php8.3-src/main/fastcgi.c
index 60a30a5..6389696 100644
--- a/third_party/php8.3-src/main/fastcgi.c
+++ b/third_party/php8.3-src/main/fastcgi.c
@@ -553,6 +553,7 @@ void fcgi_shutdown(void)
 {
 	if (is_initialized) {
 		zend_hash_destroy(&fcgi_mgmt_vars);
+		is_initialized = 0;
 	}
 	is_fastcgi = 0;
 	if (allowed_clients) {
diff --git a/third_party/php8.3-src/sapi/cgi/Makefile.frag b/third_party/php8.3-src/sapi/cgi/Makefile.frag
index 79e2afe..0956f43 100644
--- a/third_party/php8.3-src/sapi/cgi/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cgi/Makefile.frag
@@ -1,7 +1,7 @@
 cgi: $(SAPI_CGI_PATH)
 
 $(SAPI_CGI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_FASTCGI_OBJS) $(PHP_CGI_OBJS)
-	$(BUILD_CGI)
+	$(BUILD_CGI) $(WASM_SHARED_LIBS)
 
 install-cgi: $(SAPI_CGI_PATH)
 	@echo "Installing PHP CGI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/cgi/cgi_main.c b/third_party/php8.3-src/sapi/cgi/cgi_main.c
index 364758c..a969bc8 100644
--- a/third_party/php8.3-src/sapi/cgi/cgi_main.c
+++ b/third_party/php8.3-src/sapi/cgi/cgi_main.c
@@ -18,7 +18,7 @@
    |          Dmitry Stogov <dmitry@php.net>                              |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include "php.h"
 #include "php_globals.h"
 #include "php_variables.h"
@@ -1879,7 +1879,8 @@ int main(int argc, char *argv[])
 	SG(request_info).path_translated = NULL;
 #endif
 
-	cgi_sapi_module.executable_location = argv[0];
+	// cgi_sapi_module.executable_location = argv[0];
+	cgi_sapi_module.executable_location = NULL;
 	if (!cgi && !fastcgi && !bindpath) {
 		cgi_sapi_module.additional_functions = additional_functions;
 	}
@@ -1955,8 +1956,10 @@ consult the installation file that came with this distribution, or visit \n\
 	}
 
 	/* make php call us to get _ENV vars */
-	php_php_import_environment_variables = php_import_environment_variables;
-	php_import_environment_variables = cgi_php_import_environment_variables;
+	if(php_import_environment_variables != cgi_php_import_environment_variables) {
+		php_php_import_environment_variables = php_import_environment_variables;
+		php_import_environment_variables = cgi_php_import_environment_variables;
+	}
 
 	if (fastcgi) {
 		/* How many times to run PHP scripts before dying */
@@ -2676,3 +2679,18 @@ consult the installation file that came with this distribution, or visit \n\
 	return exit_status;
 }
 /* }}} */
+
+void EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_init(void)
+{
+	putenv("USE_ZEND_ALLOC=0");
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_getenv(char *name)
+{
+	return getenv(name);
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_putenv(char *name, char *value)
+{
+	return _sapi_cgi_putenv(name, strlen(name), value);
+}
diff --git a/third_party/php8.3-src/sapi/cli/Makefile.frag b/third_party/php8.3-src/sapi/cli/Makefile.frag
index aa1d642..649533d 100644
--- a/third_party/php8.3-src/sapi/cli/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cli/Makefile.frag
@@ -1,7 +1,7 @@
 cli: $(SAPI_CLI_PATH)
 
 $(SAPI_CLI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS)
-	$(BUILD_CLI)
+	$(BUILD_CLI) $(WASM_SHARED_LIBS)
 
 install-cli: $(SAPI_CLI_PATH)
 	@echo "Installing PHP CLI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/embed/php_embed.c b/third_party/php8.3-src/sapi/embed/php_embed.c
index 4626451..ba21863 100644
--- a/third_party/php8.3-src/sapi/embed/php_embed.c
+++ b/third_party/php8.3-src/sapi/embed/php_embed.c
@@ -242,8 +242,8 @@ EMBED_SAPI_API int php_embed_init(int argc, char **argv)
 		return FAILURE;
 	}
 
-	SG(headers_sent) = 1;
-	SG(request_info).no_headers = 1;
+	SG(headers_sent) = 0;
+	SG(request_info).no_headers = 0;
 	php_register_variable("PHP_SELF", "-", NULL);
 
 	return SUCCESS;
diff --git a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
index 2e2faf8..9cbb048 100644
--- a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
+++ b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
@@ -6,7 +6,7 @@ $(BUILD_SHARED): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
 	$(BUILD_PHPDBG_SHARED)
 
 $(BUILD_BINARY): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
-	$(BUILD_PHPDBG)
+	$(BUILD_PHPDBG) $(WASM_SHARED_LIBS)
 
 %.c: %.y
 %.c: %.l
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
index a583854..49f0301 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
@@ -16,6 +16,8 @@
    +----------------------------------------------------------------------+
 */
 
+#include  <emscripten.h>
+
 #include "phpdbg.h"
 #include "phpdbg_prompt.h"
 #include "phpdbg_bp.h"
@@ -148,6 +150,24 @@ static inline void php_phpdbg_globals_ctor(zend_phpdbg_globals *pg) /* {{{ */
 #endif
 } /* }}} */
 
+const char* phpdbg_wasm_current_file = NULL;
+uint32_t phpdbg_wasm_current_line = NULL;
+
+const char** EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_current_file(void)
+{
+	return &phpdbg_wasm_current_file;
+}
+
+uint32_t* EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_current_line(void)
+{
+	return &phpdbg_wasm_current_line;
+}
+
+int* EMSCRIPTEN_KEEPALIVE php_wasm_get_bpcount(void)
+{
+	return &PHPDBG_G(bp_count);
+}
+
 static PHP_MINIT_FUNCTION(phpdbg) /* {{{ */
 {
 	zend_hash_init(&PHPDBG_G(bp)[PHPDBG_BREAK_FILE], 8, NULL, php_phpdbg_destroy_bp_file, 0);
@@ -177,6 +197,9 @@ static PHP_MINIT_FUNCTION(phpdbg) /* {{{ */
 
 static PHP_MSHUTDOWN_FUNCTION(phpdbg) /* {{{ */
 {
+	phpdbg_wasm_current_file = NULL;
+	phpdbg_wasm_current_line = NULL;
+
 	zend_hash_destroy(&PHPDBG_G(registered));
 	phpdbg_destroy_watchpoints();
 
@@ -1118,7 +1141,7 @@ php_stream *phpdbg_stream_url_wrap_php(php_stream_wrapper *wrapper, const char *
 	return PHPDBG_G(orig_url_wrap_php)->wops->stream_opener(wrapper, path, mode, options, opened_path, context STREAMS_CC);
 } /* }}} */
 
-int main(int argc, char **argv) /* {{{ */
+int EMSCRIPTEN_KEEPALIVE main(int argc, char **argv) /* {{{ */
 {
 	sapi_module_struct *phpdbg = &phpdbg_sapi_module;
 	char *sapi_name;
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg.h b/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
index 8857816..6b18f62 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
@@ -182,7 +182,7 @@ int phpdbg_do_parse(phpdbg_param_t *stack, char *input);
 #ifndef _WIN32
 #	define PHPDBG_DEFAULT_FLAGS (PHPDBG_IS_QUIET | PHPDBG_IS_COLOURED | PHPDBG_IS_BP_ENABLED | PHPDBG_HAS_PAGINATION)
 #else
-#	define PHPDBG_DEFAULT_FLAGS (PHPDBG_IS_QUIET | PHPDBG_IS_BP_ENABLED | PHPDBG_HAS_PAGINATION)
+#	define PHPDBG_DEFAULT_FLAGS (PHPDBG_IS_QUIET | PHPDBG_IS_BP_ENABLED)
 #endif /* }}} */
 
 /* {{{ output descriptors */
@@ -311,4 +311,8 @@ ZEND_BEGIN_MODULE_GLOBALS(phpdbg)
 	zend_ulong lines;                                  /* max number of lines to display */
 ZEND_END_MODULE_GLOBALS(phpdbg) /* }}} */
 
+extern const char* phpdbg_wasm_current_file;
+extern uint32_t phpdbg_wasm_current_line;
+
+
 #endif /* PHPDBG_H */
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
index 6249e79..e3e7c34 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
@@ -774,7 +774,7 @@ PHPDBG_API char *phpdbg_read_input(const char *buffered) /* {{{ */
 				free(cmd);
 			}
 #else
-			phpdbg_write("%s", phpdbg_get_prompt());
+			// phpdbg_write("%s", phpdbg_get_prompt());
 			phpdbg_consume_stdin_line(buf);
 			buffer = estrdup(buf);
 #endif
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
index 14ae71a..8163757 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
@@ -14,6 +14,8 @@
    +----------------------------------------------------------------------+
 */
 
+#include  <emscripten.h>
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -22,52 +24,40 @@
 
 ZEND_EXTERN_MODULE_GLOBALS(phpdbg)
 
-/* is easy to generalize ... but not needed for now */
-PHPDBG_API int phpdbg_consume_stdin_line(char *buf) {
-	int bytes = PHPDBG_G(input_buflen), len = 0;
+EM_ASYNC_JS(int, phpdbg_internal_consume_stdin_line, (char *buf, int max_length), {
+
+	let input;
+
+	Module.triggerStdin();
 
-	if (PHPDBG_G(input_buflen)) {
-		memcpy(buf, PHPDBG_G(input_buffer), bytes);
+	if(Module.inputDataQueue.length)
+	{
+		input = String(Module.inputDataQueue.shift());
+	}
+	else
+	{
+		let a, r;
+		const promise = new Promise((accept, reject) => [a, r] = [ accept, reject ]);
+		Module.awaitingInput = a;
+		input = String(await promise);
 	}
 
-	PHPDBG_G(last_was_newline) = 1;
+	if(input.length >= max_length)
+	{
+		input = input.slice(0, max_length - 1);
+	}
 
-	do {
-		int i;
-		if (bytes <= 0) {
-			continue;
-		}
+	stringToUTF8(input, buf, input.length + 1);
 
-		for (i = len; i < len + bytes; i++) {
-			if (buf[i] == '\x03') {
-				if (i != len + bytes - 1) {
-					memmove(buf + i, buf + i + 1, len + bytes - i - 1);
-				}
-				len--;
-				i--;
-				continue;
-			}
-			if (buf[i] == '\n') {
-				PHPDBG_G(input_buflen) = len + bytes - 1 - i;
-				if (PHPDBG_G(input_buflen)) {
-					memcpy(PHPDBG_G(input_buffer), buf + i + 1, PHPDBG_G(input_buflen));
-				}
-				if (i != PHPDBG_MAX_CMD - 1) {
-					buf[i + 1] = 0;
-				}
-				return i;
-			}
-		}
 
-		len += bytes;
-	} while ((bytes = phpdbg_mixed_read(PHPDBG_G(io)[PHPDBG_STDIN].fd, buf + len, PHPDBG_MAX_CMD - len, -1)) > 0);
 
-	if (bytes <= 0) {
-		PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
-		zend_bailout();
-	}
+	return input.length;
+});
 
-	return bytes;
+
+/* is easy to generalize ... but not needed for now */
+PHPDBG_API int phpdbg_consume_stdin_line(char *buf) {
+	return phpdbg_internal_consume_stdin_line(buf, PHPDBG_MAX_CMD);
 }
 
 PHPDBG_API int phpdbg_mixed_read(int fd, char *ptr, int len, int tmo) {
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
index c054326..0c81d93 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
@@ -1657,6 +1657,8 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 	PHPDBG_G(in_execution) = 1;
 
 	while (1) {
+		phpdbg_wasm_current_file = zend_get_executed_filename();
+		phpdbg_wasm_current_line = zend_get_executed_lineno();
 		zend_object *exception = EG(exception);
 
 		if ((PHPDBG_G(flags) & PHPDBG_BP_RESOLVE_MASK)) {
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
index b7b5df6..f6e26e8 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
@@ -42,6 +42,7 @@ PHPDBG_COMMAND(leave);
 PHPDBG_COMMAND(frame);
 PHPDBG_COMMAND(print);
 PHPDBG_COMMAND(break);
+PHPDBG_COMMAND(unbreak);
 PHPDBG_COMMAND(back);
 PHPDBG_COMMAND(list);
 PHPDBG_COMMAND(info);
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_utils.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_utils.c
index 964d82e..361821c 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_utils.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_utils.c
@@ -16,6 +16,8 @@
    +----------------------------------------------------------------------+
 */
 
+#include <emscripten.h>
+
 #include "zend.h"
 
 #include "php.h"
@@ -293,7 +295,7 @@ PHPDBG_API void phpdbg_set_prompt(const char *prompt) /* {{{ */
 	PHPDBG_G(prompt)[0] = strdup(prompt);
 } /* }}} */
 
-PHPDBG_API const char *phpdbg_get_prompt(void) /* {{{ */
+PHPDBG_API const char EMSCRIPTEN_KEEPALIVE *phpdbg_get_prompt(void) /* {{{ */
 {
 	/* find cached prompt */
 	if (PHPDBG_G(prompt)[1]) {
