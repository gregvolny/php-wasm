diff --git a/third_party/php8.3-src/ext/openssl/openssl.c b/third_party/php8.3-src/ext/openssl/openssl.c
index 6f85e985..75d40903 100644
--- a/third_party/php8.3-src/ext/openssl/openssl.c
+++ b/third_party/php8.3-src/ext/openssl/openssl.c
@@ -99,7 +99,7 @@
 #define HAVE_EVP_PKEY_EC 1
 
 /* the OPENSSL_EC_EXPLICIT_CURVE value was added
- * in OpenSSL 1.1.0; previous versions should 
+ * in OpenSSL 1.1.0; previous versions should
  * use 0 instead.
  */
 #ifndef OPENSSL_EC_EXPLICIT_CURVE
@@ -1314,10 +1314,10 @@ PHP_MINIT_FUNCTION(openssl)
 #endif
 
 	/* override the default tcp socket provider */
-	php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
+	// php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
 
-	php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
 
 	REGISTER_INI_ENTRIES();
 
@@ -1380,8 +1380,8 @@ PHP_MSHUTDOWN_FUNCTION(openssl)
 	CONF_modules_free();
 #endif
 
-	php_unregister_url_stream_wrapper("https");
-	php_unregister_url_stream_wrapper("ftps");
+	// php_unregister_url_stream_wrapper("https");
+	// php_unregister_url_stream_wrapper("ftps");
 
 	php_stream_xport_unregister("ssl");
 #ifndef OPENSSL_NO_SSL3
@@ -4573,7 +4573,7 @@ static EVP_PKEY *php_openssl_pkey_init_ec(zval *data, bool *is_private) {
 		EVP_PKEY_CTX_free(ctx);
 		ctx = EVP_PKEY_CTX_new(param_key, NULL);
 	}
-	
+
 	if (EVP_PKEY_check(ctx) || EVP_PKEY_public_check_quick(ctx)) {
 		*is_private = d != NULL;
 		EVP_PKEY_up_ref(param_key);
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
index 6da77085..0d53a331 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
index c933c34e..fbd0ba72 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
index c6b907f6..c0804c8c 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 
diff --git a/third_party/php8.3-src/ext/standard/basic_functions.c b/third_party/php8.3-src/ext/standard/basic_functions.c
index 97001bca..dd1139c8 100644
--- a/third_party/php8.3-src/ext/standard/basic_functions.c
+++ b/third_party/php8.3-src/ext/standard/basic_functions.c
@@ -351,8 +351,8 @@ PHP_MINIT_FUNCTION(basic) /* {{{ */
 	php_register_url_stream_wrapper("glob", &php_glob_stream_wrapper);
 #endif
 	php_register_url_stream_wrapper("data", &php_stream_rfc2397_wrapper);
-	php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
 
 	return SUCCESS;
 }
diff --git a/third_party/php8.3-src/ext/standard/credits.c b/third_party/php8.3-src/ext/standard/credits.c
index 4e8722db..13433301 100644
--- a/third_party/php8.3-src/ext/standard/credits.c
+++ b/third_party/php8.3-src/ext/standard/credits.c
@@ -33,6 +33,11 @@ PHPAPI ZEND_COLD void php_print_credits(int flag) /* {{{ */
 		PUTS("PHP Credits\n");
 	}
 
+	php_info_print_table_start();
+	php_info_print_table_header(1, "php-wasm");
+	php_info_print_table_row(1, "Sean Morris & Oraoto");
+	php_info_print_table_end();
+
 	if (flag & PHP_CREDITS_GROUP) {
 		/* Group */
 
diff --git a/third_party/php8.3-src/ext/standard/credits_ext.h b/third_party/php8.3-src/ext/standard/credits_ext.h
index 093e56f2..2b83e525 100644
--- a/third_party/php8.3-src/ext/standard/credits_ext.h
+++ b/third_party/php8.3-src/ext/standard/credits_ext.h
@@ -47,10 +47,12 @@ CREDIT_LINE("Opcache", "Andi Gutmans, Zeev Suraski, Stanislav Malyshev, Dmitry S
 CREDIT_LINE("OpenSSL", "Stig Venaas, Wez Furlong, Sascha Kettler, Scott MacVicar, Eliot Lear");
 CREDIT_LINE("Oracle (OCI) driver for PDO", "Wez Furlong");
 CREDIT_LINE("pcntl", "Jason Greene, Arnaud Le Blanc");
+CREDIT_LINE("pdo-pglite", "Sean Morris");
 CREDIT_LINE("Perl Compatible Regexps", "Andrei Zmievski");
 CREDIT_LINE("PHP Archive", "Gregory Beaver, Marcus Boerger");
 CREDIT_LINE("PHP Data Objects", "Wez Furlong, Marcus Boerger, Sterling Hughes, George Schlossnagle, Ilia Alshanetsky");
 CREDIT_LINE("PHP hash", "Sara Golemon, Rasmus Lerdorf, Stefan Esser, Michael Wallner, Scott MacVicar");
+CREDIT_LINE("pib", "Oraoto, Sean Morris");
 CREDIT_LINE("Posix", "Kristian Koehntopp");
 CREDIT_LINE("PostgreSQL driver for PDO", "Edin Kadribasic, Ilia Alshanetsky");
 CREDIT_LINE("PostgreSQL", "Jouni Ahto, Zeev Suraski, Yasuo Ohgaki, Chris Kings-Lynne");
@@ -73,6 +75,7 @@ CREDIT_LINE("System V Semaphores", "Tom May");
 CREDIT_LINE("System V Shared Memory", "Christian Cartus");
 CREDIT_LINE("tidy", "John Coggeshall, Ilia Alshanetsky");
 CREDIT_LINE("tokenizer", "Andrei Zmievski, Johannes Schlueter");
+CREDIT_LINE("Vrzno", "Sean Morris");
 CREDIT_LINE("XML", "Stig Bakken, Thies C. Arntzen, Sterling Hughes");
 CREDIT_LINE("XMLReader", "Rob Richards");
 CREDIT_LINE("XMLWriter", "Rob Richards, Pierre-Alain Joye");
diff --git a/third_party/php8.3-src/ext/tokenizer/tokenizer.c b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
index 75cc99d7..872164ec 100644
--- a/third_party/php8.3-src/ext/tokenizer/tokenizer.c
+++ b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
@@ -319,7 +319,7 @@ static void add_token(
 	zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &token);
 }
 
-static bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
+bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
 {
 	zval source_zval;
 	zend_lex_state original_lex_state;
diff --git a/third_party/php8.3-src/main/fastcgi.c b/third_party/php8.3-src/main/fastcgi.c
index 60a30a5b..6389696b 100644
--- a/third_party/php8.3-src/main/fastcgi.c
+++ b/third_party/php8.3-src/main/fastcgi.c
@@ -553,6 +553,7 @@ void fcgi_shutdown(void)
 {
 	if (is_initialized) {
 		zend_hash_destroy(&fcgi_mgmt_vars);
+		is_initialized = 0;
 	}
 	is_fastcgi = 0;
 	if (allowed_clients) {
diff --git a/third_party/php8.3-src/sapi/cgi/Makefile.frag b/third_party/php8.3-src/sapi/cgi/Makefile.frag
index 79e2afec..0956f436 100644
--- a/third_party/php8.3-src/sapi/cgi/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cgi/Makefile.frag
@@ -1,7 +1,7 @@
 cgi: $(SAPI_CGI_PATH)
 
 $(SAPI_CGI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_FASTCGI_OBJS) $(PHP_CGI_OBJS)
-	$(BUILD_CGI)
+	$(BUILD_CGI) $(WASM_SHARED_LIBS)
 
 install-cgi: $(SAPI_CGI_PATH)
 	@echo "Installing PHP CGI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/cgi/cgi_main.c b/third_party/php8.3-src/sapi/cgi/cgi_main.c
index 364758cb..a969bc89 100644
--- a/third_party/php8.3-src/sapi/cgi/cgi_main.c
+++ b/third_party/php8.3-src/sapi/cgi/cgi_main.c
@@ -18,7 +18,7 @@
    |          Dmitry Stogov <dmitry@php.net>                              |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include "php.h"
 #include "php_globals.h"
 #include "php_variables.h"
@@ -1879,7 +1879,8 @@ int main(int argc, char *argv[])
 	SG(request_info).path_translated = NULL;
 #endif
 
-	cgi_sapi_module.executable_location = argv[0];
+	// cgi_sapi_module.executable_location = argv[0];
+	cgi_sapi_module.executable_location = NULL;
 	if (!cgi && !fastcgi && !bindpath) {
 		cgi_sapi_module.additional_functions = additional_functions;
 	}
@@ -1955,8 +1956,10 @@ consult the installation file that came with this distribution, or visit \n\
 	}
 
 	/* make php call us to get _ENV vars */
-	php_php_import_environment_variables = php_import_environment_variables;
-	php_import_environment_variables = cgi_php_import_environment_variables;
+	if(php_import_environment_variables != cgi_php_import_environment_variables) {
+		php_php_import_environment_variables = php_import_environment_variables;
+		php_import_environment_variables = cgi_php_import_environment_variables;
+	}
 
 	if (fastcgi) {
 		/* How many times to run PHP scripts before dying */
@@ -2676,3 +2679,18 @@ consult the installation file that came with this distribution, or visit \n\
 	return exit_status;
 }
 /* }}} */
+
+void EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_init(void)
+{
+	putenv("USE_ZEND_ALLOC=0");
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_getenv(char *name)
+{
+	return getenv(name);
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_putenv(char *name, char *value)
+{
+	return _sapi_cgi_putenv(name, strlen(name), value);
+}
diff --git a/third_party/php8.3-src/sapi/cli/Makefile.frag b/third_party/php8.3-src/sapi/cli/Makefile.frag
index aa1d642b..649533db 100644
--- a/third_party/php8.3-src/sapi/cli/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cli/Makefile.frag
@@ -1,7 +1,7 @@
 cli: $(SAPI_CLI_PATH)
 
 $(SAPI_CLI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS)
-	$(BUILD_CLI)
+	$(BUILD_CLI) $(WASM_SHARED_LIBS)
 
 install-cli: $(SAPI_CLI_PATH)
 	@echo "Installing PHP CLI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/embed/php_embed.c b/third_party/php8.3-src/sapi/embed/php_embed.c
index 4626451f..ba21863e 100644
--- a/third_party/php8.3-src/sapi/embed/php_embed.c
+++ b/third_party/php8.3-src/sapi/embed/php_embed.c
@@ -242,8 +242,8 @@ EMBED_SAPI_API int php_embed_init(int argc, char **argv)
 		return FAILURE;
 	}
 
-	SG(headers_sent) = 1;
-	SG(request_info).no_headers = 1;
+	SG(headers_sent) = 0;
+	SG(request_info).no_headers = 0;
 	php_register_variable("PHP_SELF", "-", NULL);
 
 	return SUCCESS;
diff --git a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
index 2e2faf80..9cbb0486 100644
--- a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
+++ b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
@@ -6,7 +6,7 @@ $(BUILD_SHARED): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
 	$(BUILD_PHPDBG_SHARED)
 
 $(BUILD_BINARY): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
-	$(BUILD_PHPDBG)
+	$(BUILD_PHPDBG) $(WASM_SHARED_LIBS)
 
 %.c: %.y
 %.c: %.l
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
index a5838545..ba51b3ab 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
@@ -15,7 +15,7 @@
    | Authors: Bob Weinand <bwoebi@php.net>                                |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include "phpdbg.h"
 #include "phpdbg_prompt.h"
 #include "phpdbg_bp.h"
@@ -1115,36 +1115,67 @@ php_stream *phpdbg_stream_url_wrap_php(php_stream_wrapper *wrapper, const char *
 		return stream;
 	}
 
+
 	return PHPDBG_G(orig_url_wrap_php)->wops->stream_opener(wrapper, path, mode, options, opened_path, context STREAMS_CC);
 } /* }}} */
 
-int main(int argc, char **argv) /* {{{ */
+struct php_ini_builder ini_builder;
+char *ini_override;
+char *exec = NULL;
+
+char *first_command = NULL;
+uint64_t flags;
+long cleaning = -1;
+
+zend_string *backup_phpdbg_compile = NULL;
+sapi_module_struct *phpdbg = &phpdbg_sapi_module;
+
+volatile bool quit_immediately = 0;
+char *bp_tmp = NULL;
+bool is_exit;
+int exit_status;
+
+zend_phpdbg_globals *settings = NULL;
+
+char *read_from_stdin = NULL;
+int php_optind, opt, show_banner = 1;
+char *sapi_name;
+
+int _argc;
+char **_argv;
+
+int phpdbg_free_and_return(void);
+int main_cleanup(void);
+
+int EMSCRIPTEN_KEEPALIVE main_init(int argc, char **argv) /* {{{ */
 {
-	sapi_module_struct *phpdbg = &phpdbg_sapi_module;
-	char *sapi_name;
-	struct php_ini_builder ini_builder;
+	_argv = argv;
+	_argc = argc;
+	// sapi_module_struct *phpdbg = &phpdbg_sapi_module;
+	// char *sapi_name;
+	// struct php_ini_builder ini_builder;
 	char **zend_extensions = NULL;
 	zend_ulong zend_extensions_len = 0L;
 	bool ini_ignore;
-	char *ini_override;
-	char *exec = NULL;
-	char *first_command = NULL;
+	// char *ini_override;
+	// char *exec = NULL;
+	// char *first_command = NULL;
 	char *init_file;
 	size_t init_file_len;
 	bool init_file_default;
-	uint64_t flags;
+	// uint64_t flags;
 	char *php_optarg;
-	int php_optind, opt, show_banner = 1;
-	long cleaning = -1;
-	volatile bool quit_immediately = 0; /* somehow some gcc release builds will play a bit around with order in combination with setjmp..., hence volatile */
-	zend_phpdbg_globals *settings = NULL;
-	char *bp_tmp = NULL;
+	// int php_optind, opt, show_banner = 1;
+	// long cleaning = -1;
+	// volatile bool quit_immediately = 0; /* somehow some gcc release builds will play a bit around with order in combination with setjmp..., hence volatile */
+	// zend_phpdbg_globals *settings = NULL;
+	// char *bp_tmp = NULL;
 	char *print_opline_func;
 	bool ext_stmt = 0;
-	bool is_exit;
-	int exit_status;
-	char *read_from_stdin = NULL;
-	zend_string *backup_phpdbg_compile = NULL;
+	// bool is_exit;
+	// int exit_status;
+	// char *read_from_stdin = NULL;
+	// zend_string *backup_phpdbg_compile = NULL;
 	bool show_help = 0, show_version = 0;
 	void* (*_malloc)(size_t);
 	void (*_free)(void*);
@@ -1152,6 +1183,11 @@ int main(int argc, char **argv) /* {{{ */
 	php_stream_wrapper wrapper;
 	php_stream_wrapper_ops wops;
 
+	sapi_name = NULL;
+
+	cleaning = -1;
+	backup_phpdbg_compile = NULL;
+
 #ifdef PHP_WIN32
 	_fmode = _O_BINARY;                 /* sets default for file streams to binary */
 	setmode(_fileno(stdin), O_BINARY);  /* make the stdio mode be binary */
@@ -1163,7 +1199,7 @@ int main(int argc, char **argv) /* {{{ */
 	signal_struct.sa_flags = SA_SIGINFO | SA_NODEFER;
 #endif
 
-phpdbg_main:
+// phpdbg_main:
 #ifdef ZTS
 	php_tsrm_startup();
 # ifdef PHP_WIN32
@@ -1186,7 +1222,7 @@ int main(int argc, char **argv) /* {{{ */
 	php_optarg = NULL;
 	php_optind = 1;
 	opt = 0;
-	sapi_name = NULL;
+	// sapi_name = NULL;
 	exit_status = 0;
 	if (settings) {
 		exec = settings->exec;
@@ -1392,7 +1428,8 @@ int main(int argc, char **argv) /* {{{ */
 			if (init_file) {
 				free(init_file);
 			}
-			goto free_and_return;
+			return phpdbg_free_and_return();
+			// goto free_and_return;
 		}
 
 		zend_try {
@@ -1519,7 +1556,8 @@ int main(int argc, char **argv) /* {{{ */
 
 		/* quit if init says so */
 		if (PHPDBG_G(flags) & PHPDBG_IS_QUITTING) {
-			goto phpdbg_out;
+			// goto phpdbg_out;
+			return main_cleanup();
 		}
 
 		/* auto compile */
@@ -1528,7 +1566,8 @@ int main(int argc, char **argv) /* {{{ */
 				if (!quit_immediately) {
 					phpdbg_error("Impossible to not specify a stdin delimiter without -rr");
 					PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
-					goto phpdbg_out;
+					// goto phpdbg_out;
+					return main_cleanup();
 				}
 			}
 			if (show_banner || read_from_stdin[0]) {
@@ -1578,64 +1617,75 @@ int main(int argc, char **argv) /* {{{ */
 			} else {
 				zend_quiet_write(PHPDBG_G(io)[PHPDBG_STDERR].fd, ZEND_STRL("No opcodes could be compiled | No file specified or compilation failed?\n"));
 			}
-			goto phpdbg_out;
+			// goto phpdbg_out;
+			return main_cleanup();
 		}
 
 		PG(during_request_startup) = 0;
 
 		phpdbg_fully_started = 1;
+	}
 
-		/* phpdbg main() */
-		do {
-			zend_try {
-				if (phpdbg_startup_run) {
-					phpdbg_startup_run = 0;
-					if (quit_immediately) {
-						PHPDBG_G(flags) = (PHPDBG_G(flags) & ~PHPDBG_HAS_PAGINATION) | PHPDBG_IS_INTERACTIVE | PHPDBG_PREVENT_INTERACTIVE;
-					} else {
-						PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
-					}
-					zend_try {
-						if (first_command) {
-							phpdbg_interactive(1, estrdup(first_command));
-						} else {
-							PHPDBG_COMMAND_HANDLER(run)(NULL);
-						}
-					} zend_end_try();
-					if (quit_immediately) {
-						/* if -r is on the command line more than once just quit */
-						EG(bailout) = __orig_bailout; /* reset zend_try */
-						exit_status = EG(exit_status);
-						break;
-					}
-				}
-
-				CG(unclean_shutdown) = 0;
-				phpdbg_interactive(1, NULL);
-			} zend_catch {
-				if ((PHPDBG_G(flags) & PHPDBG_IS_CLEANING)) {
-					char *bp_tmp_str;
-					PHPDBG_G(flags) |= PHPDBG_DISCARD_OUTPUT;
-					phpdbg_export_breakpoints_to_string(&bp_tmp_str);
-					PHPDBG_G(flags) &= ~PHPDBG_DISCARD_OUTPUT;
-					if (bp_tmp_str) {
-						bp_tmp = strdup(bp_tmp_str);
-						free(bp_tmp_str);
-					}
-					cleaning = 1;
-				} else {
-					cleaning = 0;
-				}
-			} zend_end_try();
-		} while (!(PHPDBG_G(flags) & PHPDBG_IS_STOPPING));
 
 #ifdef _WIN32
 	} __except(phpdbg_exception_handler_win32(xp = GetExceptionInformation())) {
 		phpdbg_error("Access violation (Segmentation fault) encountered\ntrying to abort cleanly...");
 	}
 #endif
-phpdbg_out:
+} /* }}} */
+
+int EMSCRIPTEN_KEEPALIVE phpdbg_main()
+{
+	/* phpdbg main() */
+	do {
+		zend_try {
+			if (phpdbg_startup_run) {
+				phpdbg_startup_run = 0;
+				if (quit_immediately) {
+					PHPDBG_G(flags) = (PHPDBG_G(flags) & ~PHPDBG_HAS_PAGINATION) | PHPDBG_IS_INTERACTIVE | PHPDBG_PREVENT_INTERACTIVE;
+				} else {
+					PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
+				}
+				zend_try {
+					if (first_command) {
+						// fprintf(stderr, "0: %s\n", input);
+						phpdbg_interactive(1, estrdup(first_command));
+					} else {
+						PHPDBG_COMMAND_HANDLER(run)(NULL);
+					}
+				} zend_end_try();
+				if (quit_immediately) {
+					/* if -r is on the command line more than once just quit */
+					EG(bailout) = __orig_bailout; /* reset zend_try */
+					exit_status = EG(exit_status);
+					break;
+				}
+			}
+
+			CG(unclean_shutdown) = 0;
+			// fprintf(stderr, "1: %s\n", input);
+			phpdbg_interactive(1, NULL);
+		} zend_catch {
+			if ((PHPDBG_G(flags) & PHPDBG_IS_CLEANING)) {
+				char *bp_tmp_str;
+				PHPDBG_G(flags) |= PHPDBG_DISCARD_OUTPUT;
+				phpdbg_export_breakpoints_to_string(&bp_tmp_str);
+				PHPDBG_G(flags) &= ~PHPDBG_DISCARD_OUTPUT;
+				if (bp_tmp_str) {
+					bp_tmp = strdup(bp_tmp_str);
+					free(bp_tmp_str);
+				}
+				cleaning = 1;
+			} else {
+				cleaning = 0;
+			}
+		} zend_end_try();
+	} while (!(PHPDBG_G(flags) & PHPDBG_IS_STOPPING));
+}
 
+int EMSCRIPTEN_KEEPALIVE main_cleanup(void)
+{
+	if (phpdbg->startup(phpdbg) == SUCCESS) {
 		phpdbg_purge_watchpoint_tree();
 
 		if (first_command) {
@@ -1753,7 +1803,11 @@ int main(int argc, char **argv) /* {{{ */
 		free(sapi_name);
 	}
 
-free_and_return:
+	return phpdbg_free_and_return();
+}
+
+int phpdbg_free_and_return()
+{
 	if (read_from_stdin) {
 		free(read_from_stdin);
 		read_from_stdin = NULL;
@@ -1770,12 +1824,12 @@ int main(int argc, char **argv) /* {{{ */
 	tsrm_shutdown();
 #endif
 
-	if ((cleaning > 0) && !quit_immediately) {
-		/* reset internal php_getopt state */
-		php_getopt(-1, argv, OPTIONS, NULL, &php_optind, 0, 0);
+	// if ((cleaning > 0) && !quit_immediately) {
+	// 	/* reset internal php_getopt state */
+	// 	php_getopt(-1, _argv, OPTIONS, NULL, &php_optind, 0, 0);
 
-		goto phpdbg_main;
-	}
+	// 	goto phpdbg_main;
+	// }
 
 	if (backup_phpdbg_compile) {
 		zend_string_free(backup_phpdbg_compile);
@@ -1783,4 +1837,4 @@ int main(int argc, char **argv) /* {{{ */
 
 	/* usually 0; just for -rr */
 	return exit_status;
-} /* }}} */
+}
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
index c0543260..efd29e16 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
@@ -15,7 +15,7 @@
    | Authors: Bob Weinand <bwoebi@php.net>                                |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include <stdio.h>
 #include <string.h>
 #include "zend.h"
@@ -1523,7 +1523,7 @@ PHPDBG_COMMAND(watch) /* {{{ */
 	return SUCCESS;
 } /* }}} */
 
-int phpdbg_interactive(bool allow_async_unsafe, char *input) /* {{{ */
+EMSCRIPTEN_KEEPALIVE int phpdbg_interactive(bool allow_async_unsafe, char *input) /* {{{ */
 {
 	int ret = SUCCESS;
 	phpdbg_param_t stack;
