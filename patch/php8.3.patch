diff --git a/third_party/php8.3-src/ext/openssl/openssl.c b/third_party/php8.3-src/ext/openssl/openssl.c
index 6f85e98..75d4090 100644
--- a/third_party/php8.3-src/ext/openssl/openssl.c
+++ b/third_party/php8.3-src/ext/openssl/openssl.c
@@ -99,7 +99,7 @@
 #define HAVE_EVP_PKEY_EC 1
 
 /* the OPENSSL_EC_EXPLICIT_CURVE value was added
- * in OpenSSL 1.1.0; previous versions should 
+ * in OpenSSL 1.1.0; previous versions should
  * use 0 instead.
  */
 #ifndef OPENSSL_EC_EXPLICIT_CURVE
@@ -1314,10 +1314,10 @@ PHP_MINIT_FUNCTION(openssl)
 #endif
 
 	/* override the default tcp socket provider */
-	php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
+	// php_stream_xport_register("tcp", php_openssl_ssl_socket_factory);
 
-	php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("https", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper);
 
 	REGISTER_INI_ENTRIES();
 
@@ -1380,8 +1380,8 @@ PHP_MSHUTDOWN_FUNCTION(openssl)
 	CONF_modules_free();
 #endif
 
-	php_unregister_url_stream_wrapper("https");
-	php_unregister_url_stream_wrapper("ftps");
+	// php_unregister_url_stream_wrapper("https");
+	// php_unregister_url_stream_wrapper("ftps");
 
 	php_stream_xport_unregister("ssl");
 #ifndef OPENSSL_NO_SSL3
@@ -4573,7 +4573,7 @@ static EVP_PKEY *php_openssl_pkey_init_ec(zval *data, bool *is_private) {
 		EVP_PKEY_CTX_free(ctx);
 		ctx = EVP_PKEY_CTX_new(param_key, NULL);
 	}
-	
+
 	if (EVP_PKEY_check(ctx) || EVP_PKEY_public_check_quick(ctx)) {
 		*is_private = d != NULL;
 		EVP_PKEY_up_ref(param_key);
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
index 6da7708..0d53a33 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/pdo_sqlite.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
index c933c34..fbd0ba7 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_driver.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 #include "zend_exceptions.h"
diff --git a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
index c6b907f..c0804c8 100644
--- a/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
+++ b/third_party/php8.3-src/ext/pdo_sqlite/sqlite_statement.c
@@ -21,8 +21,8 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "pdo/php_pdo.h"
-#include "pdo/php_pdo_driver.h"
+#include "../pdo/php_pdo.h"
+#include "../pdo/php_pdo_driver.h"
 #include "php_pdo_sqlite.h"
 #include "php_pdo_sqlite_int.h"
 
diff --git a/third_party/php8.3-src/ext/standard/basic_functions.c b/third_party/php8.3-src/ext/standard/basic_functions.c
index 97001bc..dd1139c 100644
--- a/third_party/php8.3-src/ext/standard/basic_functions.c
+++ b/third_party/php8.3-src/ext/standard/basic_functions.c
@@ -351,8 +351,8 @@ PHP_MINIT_FUNCTION(basic) /* {{{ */
 	php_register_url_stream_wrapper("glob", &php_glob_stream_wrapper);
 #endif
 	php_register_url_stream_wrapper("data", &php_stream_rfc2397_wrapper);
-	php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
-	php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
+	// php_register_url_stream_wrapper("http", &php_stream_http_wrapper);
+	// php_register_url_stream_wrapper("ftp", &php_stream_ftp_wrapper);
 
 	return SUCCESS;
 }
diff --git a/third_party/php8.3-src/ext/standard/credits.c b/third_party/php8.3-src/ext/standard/credits.c
index 4e8722d..1343330 100644
--- a/third_party/php8.3-src/ext/standard/credits.c
+++ b/third_party/php8.3-src/ext/standard/credits.c
@@ -33,6 +33,11 @@ PHPAPI ZEND_COLD void php_print_credits(int flag) /* {{{ */
 		PUTS("PHP Credits\n");
 	}
 
+	php_info_print_table_start();
+	php_info_print_table_header(1, "php-wasm");
+	php_info_print_table_row(1, "Sean Morris & Oraoto");
+	php_info_print_table_end();
+
 	if (flag & PHP_CREDITS_GROUP) {
 		/* Group */
 
diff --git a/third_party/php8.3-src/ext/standard/credits_ext.h b/third_party/php8.3-src/ext/standard/credits_ext.h
index 093e56f..2b83e52 100644
--- a/third_party/php8.3-src/ext/standard/credits_ext.h
+++ b/third_party/php8.3-src/ext/standard/credits_ext.h
@@ -47,10 +47,12 @@ CREDIT_LINE("Opcache", "Andi Gutmans, Zeev Suraski, Stanislav Malyshev, Dmitry S
 CREDIT_LINE("OpenSSL", "Stig Venaas, Wez Furlong, Sascha Kettler, Scott MacVicar, Eliot Lear");
 CREDIT_LINE("Oracle (OCI) driver for PDO", "Wez Furlong");
 CREDIT_LINE("pcntl", "Jason Greene, Arnaud Le Blanc");
+CREDIT_LINE("pdo-pglite", "Sean Morris");
 CREDIT_LINE("Perl Compatible Regexps", "Andrei Zmievski");
 CREDIT_LINE("PHP Archive", "Gregory Beaver, Marcus Boerger");
 CREDIT_LINE("PHP Data Objects", "Wez Furlong, Marcus Boerger, Sterling Hughes, George Schlossnagle, Ilia Alshanetsky");
 CREDIT_LINE("PHP hash", "Sara Golemon, Rasmus Lerdorf, Stefan Esser, Michael Wallner, Scott MacVicar");
+CREDIT_LINE("pib", "Oraoto, Sean Morris");
 CREDIT_LINE("Posix", "Kristian Koehntopp");
 CREDIT_LINE("PostgreSQL driver for PDO", "Edin Kadribasic, Ilia Alshanetsky");
 CREDIT_LINE("PostgreSQL", "Jouni Ahto, Zeev Suraski, Yasuo Ohgaki, Chris Kings-Lynne");
@@ -73,6 +75,7 @@ CREDIT_LINE("System V Semaphores", "Tom May");
 CREDIT_LINE("System V Shared Memory", "Christian Cartus");
 CREDIT_LINE("tidy", "John Coggeshall, Ilia Alshanetsky");
 CREDIT_LINE("tokenizer", "Andrei Zmievski, Johannes Schlueter");
+CREDIT_LINE("Vrzno", "Sean Morris");
 CREDIT_LINE("XML", "Stig Bakken, Thies C. Arntzen, Sterling Hughes");
 CREDIT_LINE("XMLReader", "Rob Richards");
 CREDIT_LINE("XMLWriter", "Rob Richards, Pierre-Alain Joye");
diff --git a/third_party/php8.3-src/ext/tokenizer/tokenizer.c b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
index 75cc99d..872164e 100644
--- a/third_party/php8.3-src/ext/tokenizer/tokenizer.c
+++ b/third_party/php8.3-src/ext/tokenizer/tokenizer.c
@@ -319,7 +319,7 @@ static void add_token(
 	zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &token);
 }
 
-static bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
+bool tokenize(zval *return_value, zend_string *source, zend_class_entry *token_class)
 {
 	zval source_zval;
 	zend_lex_state original_lex_state;
diff --git a/third_party/php8.3-src/main/fastcgi.c b/third_party/php8.3-src/main/fastcgi.c
index 60a30a5..6389696 100644
--- a/third_party/php8.3-src/main/fastcgi.c
+++ b/third_party/php8.3-src/main/fastcgi.c
@@ -553,6 +553,7 @@ void fcgi_shutdown(void)
 {
 	if (is_initialized) {
 		zend_hash_destroy(&fcgi_mgmt_vars);
+		is_initialized = 0;
 	}
 	is_fastcgi = 0;
 	if (allowed_clients) {
diff --git a/third_party/php8.3-src/sapi/cgi/Makefile.frag b/third_party/php8.3-src/sapi/cgi/Makefile.frag
index 79e2afe..0956f43 100644
--- a/third_party/php8.3-src/sapi/cgi/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cgi/Makefile.frag
@@ -1,7 +1,7 @@
 cgi: $(SAPI_CGI_PATH)
 
 $(SAPI_CGI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_FASTCGI_OBJS) $(PHP_CGI_OBJS)
-	$(BUILD_CGI)
+	$(BUILD_CGI) $(WASM_SHARED_LIBS)
 
 install-cgi: $(SAPI_CGI_PATH)
 	@echo "Installing PHP CGI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/cgi/cgi_main.c b/third_party/php8.3-src/sapi/cgi/cgi_main.c
index 364758c..a969bc8 100644
--- a/third_party/php8.3-src/sapi/cgi/cgi_main.c
+++ b/third_party/php8.3-src/sapi/cgi/cgi_main.c
@@ -18,7 +18,7 @@
    |          Dmitry Stogov <dmitry@php.net>                              |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include "php.h"
 #include "php_globals.h"
 #include "php_variables.h"
@@ -1879,7 +1879,8 @@ int main(int argc, char *argv[])
 	SG(request_info).path_translated = NULL;
 #endif
 
-	cgi_sapi_module.executable_location = argv[0];
+	// cgi_sapi_module.executable_location = argv[0];
+	cgi_sapi_module.executable_location = NULL;
 	if (!cgi && !fastcgi && !bindpath) {
 		cgi_sapi_module.additional_functions = additional_functions;
 	}
@@ -1955,8 +1956,10 @@ consult the installation file that came with this distribution, or visit \n\
 	}
 
 	/* make php call us to get _ENV vars */
-	php_php_import_environment_variables = php_import_environment_variables;
-	php_import_environment_variables = cgi_php_import_environment_variables;
+	if(php_import_environment_variables != cgi_php_import_environment_variables) {
+		php_php_import_environment_variables = php_import_environment_variables;
+		php_import_environment_variables = cgi_php_import_environment_variables;
+	}
 
 	if (fastcgi) {
 		/* How many times to run PHP scripts before dying */
@@ -2676,3 +2679,18 @@ consult the installation file that came with this distribution, or visit \n\
 	return exit_status;
 }
 /* }}} */
+
+void EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_init(void)
+{
+	putenv("USE_ZEND_ALLOC=0");
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_getenv(char *name)
+{
+	return getenv(name);
+}
+
+char* EMSCRIPTEN_KEEPALIVE wasm_sapi_cgi_putenv(char *name, char *value)
+{
+	return _sapi_cgi_putenv(name, strlen(name), value);
+}
diff --git a/third_party/php8.3-src/sapi/cli/Makefile.frag b/third_party/php8.3-src/sapi/cli/Makefile.frag
index aa1d642..649533d 100644
--- a/third_party/php8.3-src/sapi/cli/Makefile.frag
+++ b/third_party/php8.3-src/sapi/cli/Makefile.frag
@@ -1,7 +1,7 @@
 cli: $(SAPI_CLI_PATH)
 
 $(SAPI_CLI_PATH): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS)
-	$(BUILD_CLI)
+	$(BUILD_CLI) $(WASM_SHARED_LIBS)
 
 install-cli: $(SAPI_CLI_PATH)
 	@echo "Installing PHP CLI binary:        $(INSTALL_ROOT)$(bindir)/"
diff --git a/third_party/php8.3-src/sapi/embed/php_embed.c b/third_party/php8.3-src/sapi/embed/php_embed.c
index 4626451..ba21863 100644
--- a/third_party/php8.3-src/sapi/embed/php_embed.c
+++ b/third_party/php8.3-src/sapi/embed/php_embed.c
@@ -242,8 +242,8 @@ EMBED_SAPI_API int php_embed_init(int argc, char **argv)
 		return FAILURE;
 	}
 
-	SG(headers_sent) = 1;
-	SG(request_info).no_headers = 1;
+	SG(headers_sent) = 0;
+	SG(request_info).no_headers = 0;
 	php_register_variable("PHP_SELF", "-", NULL);
 
 	return SUCCESS;
diff --git a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
index 2e2faf8..9cbb048 100644
--- a/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
+++ b/third_party/php8.3-src/sapi/phpdbg/Makefile.frag
@@ -6,7 +6,7 @@ $(BUILD_SHARED): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
 	$(BUILD_PHPDBG_SHARED)
 
 $(BUILD_BINARY): $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_PHPDBG_OBJS)
-	$(BUILD_PHPDBG)
+	$(BUILD_PHPDBG) $(WASM_SHARED_LIBS)
 
 %.c: %.y
 %.c: %.l
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
index a583854..f8c9e92 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg.c
@@ -15,7 +15,7 @@
    | Authors: Bob Weinand <bwoebi@php.net>                                |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include "phpdbg.h"
 #include "phpdbg_prompt.h"
 #include "phpdbg_bp.h"
@@ -1115,36 +1115,67 @@ php_stream *phpdbg_stream_url_wrap_php(php_stream_wrapper *wrapper, const char *
 		return stream;
 	}
 
+
 	return PHPDBG_G(orig_url_wrap_php)->wops->stream_opener(wrapper, path, mode, options, opened_path, context STREAMS_CC);
 } /* }}} */
 
-int main(int argc, char **argv) /* {{{ */
+struct php_ini_builder ini_builder;
+char *ini_override;
+char *exec = NULL;
+
+char *first_command = NULL;
+uint64_t flags;
+long cleaning = -1;
+
+zend_string *backup_phpdbg_compile = NULL;
+sapi_module_struct *phpdbg = &phpdbg_sapi_module;
+
+volatile bool quit_immediately = 0;
+char *bp_tmp = NULL;
+bool is_exit;
+int exit_status;
+
+zend_phpdbg_globals *settings = NULL;
+
+char *read_from_stdin = NULL;
+int php_optind, opt, show_banner = 1;
+char *sapi_name;
+
+int _argc;
+char **_argv;
+
+int phpdbg_free_and_return(void);
+int main_cleanup(void);
+
+int EMSCRIPTEN_KEEPALIVE main_init(int argc, char **argv) /* {{{ */
 {
-	sapi_module_struct *phpdbg = &phpdbg_sapi_module;
-	char *sapi_name;
-	struct php_ini_builder ini_builder;
+	_argv = argv;
+	_argc = argc;
+	// sapi_module_struct *phpdbg = &phpdbg_sapi_module;
+	// char *sapi_name;
+	// struct php_ini_builder ini_builder;
 	char **zend_extensions = NULL;
 	zend_ulong zend_extensions_len = 0L;
 	bool ini_ignore;
-	char *ini_override;
-	char *exec = NULL;
-	char *first_command = NULL;
+	// char *ini_override;
+	// char *exec = NULL;
+	// char *first_command = NULL;
 	char *init_file;
 	size_t init_file_len;
 	bool init_file_default;
-	uint64_t flags;
+	// uint64_t flags;
 	char *php_optarg;
-	int php_optind, opt, show_banner = 1;
-	long cleaning = -1;
-	volatile bool quit_immediately = 0; /* somehow some gcc release builds will play a bit around with order in combination with setjmp..., hence volatile */
-	zend_phpdbg_globals *settings = NULL;
-	char *bp_tmp = NULL;
+	// int php_optind, opt, show_banner = 1;
+	// long cleaning = -1;
+	// volatile bool quit_immediately = 0; /* somehow some gcc release builds will play a bit around with order in combination with setjmp..., hence volatile */
+	// zend_phpdbg_globals *settings = NULL;
+	// char *bp_tmp = NULL;
 	char *print_opline_func;
 	bool ext_stmt = 0;
-	bool is_exit;
-	int exit_status;
-	char *read_from_stdin = NULL;
-	zend_string *backup_phpdbg_compile = NULL;
+	// bool is_exit;
+	// int exit_status;
+	// char *read_from_stdin = NULL;
+	// zend_string *backup_phpdbg_compile = NULL;
 	bool show_help = 0, show_version = 0;
 	void* (*_malloc)(size_t);
 	void (*_free)(void*);
@@ -1152,6 +1183,11 @@ int main(int argc, char **argv) /* {{{ */
 	php_stream_wrapper wrapper;
 	php_stream_wrapper_ops wops;
 
+	sapi_name = NULL;
+
+	cleaning = -1;
+	backup_phpdbg_compile = NULL;
+
 #ifdef PHP_WIN32
 	_fmode = _O_BINARY;                 /* sets default for file streams to binary */
 	setmode(_fileno(stdin), O_BINARY);  /* make the stdio mode be binary */
@@ -1163,7 +1199,7 @@ int main(int argc, char **argv) /* {{{ */
 	signal_struct.sa_flags = SA_SIGINFO | SA_NODEFER;
 #endif
 
-phpdbg_main:
+// phpdbg_main:
 #ifdef ZTS
 	php_tsrm_startup();
 # ifdef PHP_WIN32
@@ -1186,7 +1222,7 @@ int main(int argc, char **argv) /* {{{ */
 	php_optarg = NULL;
 	php_optind = 1;
 	opt = 0;
-	sapi_name = NULL;
+	// sapi_name = NULL;
 	exit_status = 0;
 	if (settings) {
 		exec = settings->exec;
@@ -1378,6 +1414,7 @@ int main(int argc, char **argv) /* {{{ */
 					get_zend_version()
 				);
 			}
+			fprintf(stderr, "quit on main\n");
 			PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
 			php_module_shutdown();
 			sapi_deactivate();
@@ -1392,7 +1429,8 @@ int main(int argc, char **argv) /* {{{ */
 			if (init_file) {
 				free(init_file);
 			}
-			goto free_and_return;
+			return phpdbg_free_and_return();
+			// goto free_and_return;
 		}
 
 		zend_try {
@@ -1519,7 +1557,8 @@ int main(int argc, char **argv) /* {{{ */
 
 		/* quit if init says so */
 		if (PHPDBG_G(flags) & PHPDBG_IS_QUITTING) {
-			goto phpdbg_out;
+			// goto phpdbg_out;
+			return main_cleanup();
 		}
 
 		/* auto compile */
@@ -1528,7 +1567,8 @@ int main(int argc, char **argv) /* {{{ */
 				if (!quit_immediately) {
 					phpdbg_error("Impossible to not specify a stdin delimiter without -rr");
 					PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
-					goto phpdbg_out;
+					// goto phpdbg_out;
+					return main_cleanup();
 				}
 			}
 			if (show_banner || read_from_stdin[0]) {
@@ -1578,64 +1618,114 @@ int main(int argc, char **argv) /* {{{ */
 			} else {
 				zend_quiet_write(PHPDBG_G(io)[PHPDBG_STDERR].fd, ZEND_STRL("No opcodes could be compiled | No file specified or compilation failed?\n"));
 			}
-			goto phpdbg_out;
+			// goto phpdbg_out;
+			return main_cleanup();
 		}
 
 		PG(during_request_startup) = 0;
 
 		phpdbg_fully_started = 1;
+	}
 
-		/* phpdbg main() */
-		do {
-			zend_try {
-				if (phpdbg_startup_run) {
-					phpdbg_startup_run = 0;
-					if (quit_immediately) {
-						PHPDBG_G(flags) = (PHPDBG_G(flags) & ~PHPDBG_HAS_PAGINATION) | PHPDBG_IS_INTERACTIVE | PHPDBG_PREVENT_INTERACTIVE;
-					} else {
-						PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
-					}
-					zend_try {
-						if (first_command) {
-							phpdbg_interactive(1, estrdup(first_command));
-						} else {
-							PHPDBG_COMMAND_HANDLER(run)(NULL);
-						}
-					} zend_end_try();
-					if (quit_immediately) {
-						/* if -r is on the command line more than once just quit */
-						EG(bailout) = __orig_bailout; /* reset zend_try */
-						exit_status = EG(exit_status);
-						break;
-					}
-				}
-
-				CG(unclean_shutdown) = 0;
-				phpdbg_interactive(1, NULL);
-			} zend_catch {
-				if ((PHPDBG_G(flags) & PHPDBG_IS_CLEANING)) {
-					char *bp_tmp_str;
-					PHPDBG_G(flags) |= PHPDBG_DISCARD_OUTPUT;
-					phpdbg_export_breakpoints_to_string(&bp_tmp_str);
-					PHPDBG_G(flags) &= ~PHPDBG_DISCARD_OUTPUT;
-					if (bp_tmp_str) {
-						bp_tmp = strdup(bp_tmp_str);
-						free(bp_tmp_str);
-					}
-					cleaning = 1;
-				} else {
-					cleaning = 0;
-				}
-			} zend_end_try();
-		} while (!(PHPDBG_G(flags) & PHPDBG_IS_STOPPING));
 
 #ifdef _WIN32
 	} __except(phpdbg_exception_handler_win32(xp = GetExceptionInformation())) {
 		phpdbg_error("Access violation (Segmentation fault) encountered\ntrying to abort cleanly...");
 	}
 #endif
-phpdbg_out:
+} /* }}} */
+
+bool phpdbg_wasm_running = false;
+bool phpdbg_wasm_paused = false;
 
+char* phpdbg_wasm_current_file = NULL;
+uint32_t phpdbg_wasm_current_line = NULL;
+
+
+bool* EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_running_flag_pointer(void)
+{
+	return &phpdbg_wasm_running;
+}
+
+bool* EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_paused_flag_pointer(void)
+{
+	return &phpdbg_wasm_paused;
+}
+
+bool* EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_current_file(void)
+{
+	return &phpdbg_wasm_current_file;
+}
+
+bool* EMSCRIPTEN_KEEPALIVE phpdbg_wasm_get_current_line(void)
+{
+	return &phpdbg_wasm_current_line;
+}
+
+int EMSCRIPTEN_KEEPALIVE phpdbg_main(char* input)
+{
+	/* phpdbg main() */
+
+	if (phpdbg_wasm_running) {
+		if(input && strlen(input)) {
+			phpdbg_wasm_paused = true;
+			phpdbg_interactive(1, input);
+		}
+		else {
+			phpdbg_execute_ex_real(NULL, input);
+		}
+		return 0;
+	}
+
+	// do {
+		zend_try {
+			// if (phpdbg_startup_run) {
+			// 	phpdbg_startup_run = 0;
+			// 	if (quit_immediately) {
+			// 		PHPDBG_G(flags) = (PHPDBG_G(flags) & ~PHPDBG_HAS_PAGINATION) | PHPDBG_IS_INTERACTIVE | PHPDBG_PREVENT_INTERACTIVE;
+			// 	} else {
+			// 		PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
+			// 	}
+			// 	zend_try {
+			// 		if (first_command) {
+			// 			// fprintf(stderr, "0: %s\n", input);
+			// 			phpdbg_interactive(1, estrdup(first_command));
+			// 		} else {
+			// 			PHPDBG_COMMAND_HANDLER(run)(NULL);
+			// 		}
+			// 	} zend_end_try();
+			// 	if (quit_immediately) {
+			// 		/* if -r is on the command line more than once just quit */
+			// 		EG(bailout) = __orig_bailout; /* reset zend_try */
+			// 		exit_status = EG(exit_status);
+			// 		// break;
+			// 	}
+			// }
+
+			CG(unclean_shutdown) = 0;
+			// fprintf(stderr, "1: %s\n", input);
+			phpdbg_interactive(1, input);
+		} zend_catch {
+			if ((PHPDBG_G(flags) & PHPDBG_IS_CLEANING)) {
+				char *bp_tmp_str;
+				PHPDBG_G(flags) |= PHPDBG_DISCARD_OUTPUT;
+				phpdbg_export_breakpoints_to_string(&bp_tmp_str);
+				PHPDBG_G(flags) &= ~PHPDBG_DISCARD_OUTPUT;
+				if (bp_tmp_str) {
+					bp_tmp = strdup(bp_tmp_str);
+					free(bp_tmp_str);
+				}
+				cleaning = 1;
+			} else {
+				cleaning = 0;
+			}
+		} zend_end_try();
+	// } while (!(PHPDBG_G(flags) & PHPDBG_IS_STOPPING));
+}
+
+int EMSCRIPTEN_KEEPALIVE main_cleanup(void)
+{
+	if (phpdbg->startup(phpdbg) == SUCCESS) {
 		phpdbg_purge_watchpoint_tree();
 
 		if (first_command) {
@@ -1753,7 +1843,11 @@ int main(int argc, char **argv) /* {{{ */
 		free(sapi_name);
 	}
 
-free_and_return:
+	return phpdbg_free_and_return();
+}
+
+int phpdbg_free_and_return()
+{
 	if (read_from_stdin) {
 		free(read_from_stdin);
 		read_from_stdin = NULL;
@@ -1770,12 +1864,12 @@ int main(int argc, char **argv) /* {{{ */
 	tsrm_shutdown();
 #endif
 
-	if ((cleaning > 0) && !quit_immediately) {
-		/* reset internal php_getopt state */
-		php_getopt(-1, argv, OPTIONS, NULL, &php_optind, 0, 0);
+	// if ((cleaning > 0) && !quit_immediately) {
+	// 	/* reset internal php_getopt state */
+	// 	php_getopt(-1, _argv, OPTIONS, NULL, &php_optind, 0, 0);
 
-		goto phpdbg_main;
-	}
+	// 	goto phpdbg_main;
+	// }
 
 	if (backup_phpdbg_compile) {
 		zend_string_free(backup_phpdbg_compile);
@@ -1783,4 +1877,4 @@ int main(int argc, char **argv) /* {{{ */
 
 	/* usually 0; just for -rr */
 	return exit_status;
-} /* }}} */
+}
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg.h b/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
index 8857816..7e43432 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg.h
@@ -311,4 +311,10 @@ ZEND_BEGIN_MODULE_GLOBALS(phpdbg)
 	zend_ulong lines;                                  /* max number of lines to display */
 ZEND_END_MODULE_GLOBALS(phpdbg) /* }}} */
 
+extern bool phpdbg_wasm_running;
+extern bool phpdbg_wasm_paused;
+
+extern char* phpdbg_wasm_current_file;
+extern uint32_t phpdbg_wasm_current_line;
+
 #endif /* PHPDBG_H */
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_bp.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_bp.c
index 90f8ed7..2c179e6 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_bp.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_bp.c
@@ -1272,6 +1272,8 @@ PHPDBG_API void phpdbg_clear_breakpoints(void) /* {{{ */
 
 PHPDBG_API void phpdbg_hit_breakpoint(phpdbg_breakbase_t *brake, bool output) /* {{{ */
 {
+	phpdbg_wasm_paused = true;
+
 	brake->hits++;
 
 	if (output) {
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
index 6249e79..966876c 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_cmd.c
@@ -765,6 +765,7 @@ PHPDBG_API char *phpdbg_read_input(const char *buffered) /* {{{ */
 				PHPDBG_G(last_was_newline) = 1;
 
 				if (!cmd) {
+					fprintf(stderr, "quit on read_input\n");
 					PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
 					zend_bailout();
 				}
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
index 14ae71a..e0a9318 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_io.c
@@ -62,10 +62,11 @@ PHPDBG_API int phpdbg_consume_stdin_line(char *buf) {
 		len += bytes;
 	} while ((bytes = phpdbg_mixed_read(PHPDBG_G(io)[PHPDBG_STDIN].fd, buf + len, PHPDBG_MAX_CMD - len, -1)) > 0);
 
-	if (bytes <= 0) {
-		PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
-		zend_bailout();
-	}
+	// if (bytes <= 0) {
+	// 	fprintf(stderr, "quit on consume_stdin\n");
+	// 	PHPDBG_G(flags) |= PHPDBG_IS_QUITTING;
+	// 	zend_bailout();
+	// }
 
 	return bytes;
 }
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
index c054326..28f4421 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.c
@@ -15,7 +15,7 @@
    | Authors: Bob Weinand <bwoebi@php.net>                                |
    +----------------------------------------------------------------------+
 */
-
+#include <emscripten.h>
 #include <stdio.h>
 #include <string.h>
 #include "zend.h"
@@ -391,6 +391,7 @@ void phpdbg_clean(bool full, bool resubmit) /* {{{ */
 	}
 
 	if (full) {
+		fprintf(stderr, "quit on clean\n");
 		PHPDBG_G(flags) |= PHPDBG_IS_CLEANING;
 	}
 } /* }}} */
@@ -746,16 +747,22 @@ static inline void phpdbg_handle_exception(void) /* {{{ */
 
 PHPDBG_COMMAND(run) /* {{{ */
 {
+	if (phpdbg_wasm_running) {
+		return SUCCESS;
+	}
+
 	if (PHPDBG_G(ops) || PHPDBG_G(exec)) {
 		zend_execute_data *ex = EG(current_execute_data);
 		bool restore = 1;
 
+		// fprintf(stderr, "cmd_run\n");
+
 		if (PHPDBG_G(in_execution)) {
-			if (phpdbg_ask_user_permission("Do you really want to restart execution?") == SUCCESS) {
-				phpdbg_startup_run++;
-				phpdbg_clean(1, 1);
-			}
-			return SUCCESS;
+			// if (phpdbg_ask_user_permission("Do you really want to restart execution?") == SUCCESS) {
+			// }
+			phpdbg_startup_run++;
+			phpdbg_clean(1, 1);
+			// return SUCCESS;
 		}
 
 		if (!PHPDBG_G(ops)) {
@@ -1523,22 +1530,23 @@ PHPDBG_COMMAND(watch) /* {{{ */
 	return SUCCESS;
 } /* }}} */
 
-int phpdbg_interactive(bool allow_async_unsafe, char *input) /* {{{ */
+EMSCRIPTEN_KEEPALIVE int phpdbg_interactive(bool allow_async_unsafe, char *input) /* {{{ */
 {
 	int ret = SUCCESS;
 	phpdbg_param_t stack;
 
-	PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
+	// fprintf(stderr, "phpdbg_interactive: '%s'\n", input);
 
-	while (ret == SUCCESS || ret == FAILURE) {
-		if (PHPDBG_G(flags) & PHPDBG_IS_STOPPING) {
-			zend_bailout();
-		}
+	PHPDBG_G(flags) |= PHPDBG_IS_INTERACTIVE;
 
-		if (!input && !(input = phpdbg_read_input(NULL))) {
-			break;
-		}
+	if (ret == SUCCESS || ret == FAILURE) {
+		// if (PHPDBG_G(flags) & PHPDBG_IS_STOPPING) {
+		// 	zend_bailout();
+		// }
 
+		// if (!input && !(input = phpdbg_read_input(NULL))) {
+		// 	break;
+		// }
 
 		phpdbg_init_param(&stack, STACK_PARAM);
 
@@ -1615,7 +1623,7 @@ static inline void list_code(void) {
 }
 
 /* code may behave weirdly if EG(exception) is set; thus backup it */
-#define DO_INTERACTIVE(allow_async_unsafe) do { \
+#define DO_INTERACTIVE(allow_async_unsafe, input) do { \
 	if (exception) { \
 		const zend_op *before_ex = EG(opline_before_exception); \
 		const zend_op *backup_opline = NULL; \
@@ -1625,7 +1633,7 @@ static inline void list_code(void) {
 		GC_ADDREF(exception); \
 		zend_clear_exception(); \
 		list_code(); \
-		switch (phpdbg_interactive(allow_async_unsafe, NULL)) { \
+		switch (phpdbg_interactive(allow_async_unsafe, input)) { \
 			case PHPDBG_LEAVE: \
 			case PHPDBG_FINISH: \
 			case PHPDBG_UNTIL: \
@@ -1641,22 +1649,41 @@ static inline void list_code(void) {
 		} \
 	} else { \
 		list_code(); \
-		phpdbg_interactive(allow_async_unsafe, NULL); \
+		phpdbg_interactive(allow_async_unsafe, input); \
 	} \
 	goto next; \
 } while (0)
 
+bool original_in_execution;
+zend_execute_data *_execute_data;
+
 void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 {
-	bool original_in_execution = PHPDBG_G(in_execution);
+	phpdbg_execute_ex_real(execute_data, NULL);
+}
 
-	if ((PHPDBG_G(flags) & PHPDBG_IS_STOPPING) && !(PHPDBG_G(flags) & PHPDBG_IS_RUNNING)) {
-		zend_bailout();
+void phpdbg_execute_ex_real(zend_execute_data *execute_data, char* input) /* {{{ */
+{
+	original_in_execution = PHPDBG_G(in_execution);
+
+	if (execute_data) {
+		_execute_data = execute_data;
+	}
+	else if (_execute_data) {
+		execute_data = _execute_data;
 	}
 
+	// if ((PHPDBG_G(flags) & PHPDBG_IS_STOPPING) && !(PHPDBG_G(flags) & PHPDBG_IS_RUNNING)) {
+	// 	zend_bailout();
+	// }
+
+	phpdbg_wasm_current_file = zend_get_executed_filename(),
+	phpdbg_wasm_current_line = zend_get_executed_lineno(),
+
 	PHPDBG_G(in_execution) = 1;
 
-	while (1) {
+	// while (1) {
+		phpdbg_wasm_running = true;
 		zend_object *exception = EG(exception);
 
 		if ((PHPDBG_G(flags) & PHPDBG_BP_RESOLVE_MASK)) {
@@ -1709,7 +1736,8 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 			zend_string_release(msg);
 			zend_string_release(file);
 
-			DO_INTERACTIVE(1);
+			// fprintf(stderr, "DI 1\n");
+			DO_INTERACTIVE(1, input);
 		}
 ex_is_caught:
 
@@ -1766,7 +1794,8 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 						zend_get_executed_filename(),
 						zend_get_executed_lineno()
 					);
-					DO_INTERACTIVE(1);
+					// fprintf(stderr, "D2 1\n");
+					DO_INTERACTIVE(1, input);
 				} else {
 					/* skip possible breakpoints */
 					goto next;
@@ -1777,13 +1806,15 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 		if (PHPDBG_G(flags) & PHPDBG_IS_STEPPING && (PHPDBG_G(flags) & PHPDBG_STEP_OPCODE || execute_data->opline->lineno != PHPDBG_G(last_line))) {
 stepping:
 			PHPDBG_G(flags) &= ~PHPDBG_IS_STEPPING;
-			DO_INTERACTIVE(1);
+			fprintf(stderr, "DI 3\n");
+			DO_INTERACTIVE(1, input);
 		}
 
 		/* check if some watchpoint was hit */
 		{
 			if (phpdbg_print_changed_zvals() == SUCCESS) {
-				DO_INTERACTIVE(1);
+				// fprintf(stderr, "DI 4\n");
+				DO_INTERACTIVE(1, input);
 			}
 		}
 
@@ -1795,7 +1826,8 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 			    && (brake = phpdbg_find_breakpoint(execute_data))
 			    && (brake->type != PHPDBG_BREAK_FILE || execute_data->opline->lineno != PHPDBG_G(last_line))) {
 				phpdbg_hit_breakpoint(brake, 1);
-				DO_INTERACTIVE(1);
+				// fprintf(stderr, "DI 5\n");
+				DO_INTERACTIVE(1, input);
 			}
 		}
 
@@ -1804,7 +1836,8 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 
 			phpdbg_out("\n");
 			phpdbg_notice("Program received signal SIGINT");
-			DO_INTERACTIVE(1);
+			// fprintf(stderr, "DI 6\n");
+			DO_INTERACTIVE(1, input);
 		}
 
 next:
@@ -1824,13 +1857,15 @@ void phpdbg_execute_ex(zend_execute_data *execute_data) /* {{{ */
 		if (PHPDBG_G(vmret) != 0) {
 			if (PHPDBG_G(vmret) < 0) {
 				PHPDBG_G(in_execution) = original_in_execution;
+				phpdbg_wasm_running = false;
+				phpdbg_wasm_paused = false;
 				return;
 			} else {
-				execute_data = EG(current_execute_data);
+				_execute_data = execute_data = EG(current_execute_data);
 			}
 		}
-	}
-	zend_error_noreturn(E_ERROR, "Arrived at end of main loop which shouldn't happen");
+	// }
+	// zend_error_noreturn(E_ERROR, "Arrived at end of main loop which shouldn't happen");
 } /* }}} */
 
 /* only if *not* interactive and while executing */
@@ -1862,7 +1897,8 @@ void phpdbg_force_interruption(void) /* {{{ */ {
 		phpdbg_notice("No information available about executing context");
 	}
 
-	DO_INTERACTIVE(0);
+	fprintf(stderr, "DI 7\n");
+	DO_INTERACTIVE(0, NULL);
 
 next:
 	PHPDBG_G(flags) &= ~PHPDBG_IN_SIGNAL_HANDLER;
diff --git a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
index b7b5df6..198cd5d 100644
--- a/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
+++ b/third_party/php8.3-src/sapi/phpdbg/phpdbg_prompt.h
@@ -64,5 +64,6 @@ PHPDBG_COMMAND(eol); /* }}} */
 extern const phpdbg_command_t phpdbg_prompt_commands[]; /* }}} */
 
 void phpdbg_execute_ex(zend_execute_data *execute_data);
+void phpdbg_execute_ex_real(zend_execute_data *execute_data, char* input);
 
 #endif /* PHPDBG_PROMPT_H */
